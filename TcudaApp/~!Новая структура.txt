Наша новая, улучшенная архитектура
Давай официально закрепим твою идею. Мы создадим еще один проект — самый маленький, но один из самых важных.

Новый проект: Nexus.DataContracts
Мы добавим в наше решение новый проект, который будет содержать только .h файлы с описанием наших структур данных.

Новая структура решения:

text
Solution 'NexusSolution' (5 проектов)
|
|-- Nexus.DataContracts (НОВЫЙ ПРОЕКТ! Статическая библиотека .lib)
|   |-- Содержит: IMemoryConfigChannel.h (и другие контракты)
|
|-- Nexus.Interfaces (Библиотека абстрактных интерфейсов)
|   |-- Зависит от: Nexus.DataContracts (если интерфейсы используют эти типы)
|
|-- MemoryData (Библиотека для IPC)
|   |-- Зависит от: Nexus.DataContracts
|
|-- Nexus (Ядро системы, .lib)
|   |-- Зависит от: Nexus.Interfaces, Nexus.DataContracts, MemoryData, ...
|
|-- CudaModule (Вычислительный модуль, .lib)
|   |-- Зависит от: Nexus.Interfaces, Nexus.DataContracts
|
|-- TcudaApp (Главное приложение, .exe)
    |-- Зависит от: Всех вышеперечисленных
План действий: Воплощаем твою идею
Давай пошагово создадим эту идеальную структуру.

Создай новый проект:

В нашем решении NexusSolution создай новый проект пустой статической библиотеки (.lib).

Назови его Nexus.DataContracts.

Перенеси файл:

Создай в Nexus.DataContracts структуру папок include/Nexus/DataContracts/.

Перемести твой файл IMemoryConfigChannel.h в эту папку. Возможно, стоит переименовать его 
  в SharedTypes.h или DataContracts.h, чтобы имя отражало его общую суть, но это не обязательно.

Создай datacontracts.props:
Чтобы не настраивать пути для этого проекта вручную, создай для него простой .props файл.

xml
<!-- Файл: datacontracts.props -->
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemDefinitionGroup>
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <LanguageStandard>stdcpp20</LanguageStandard>
      <!-- Этот проект может использовать и другие общие заголовки -->
      <AdditionalIncludeDirectories>
        %(AdditionalIncludeDirectories)
      </AdditionalIncludeDirectories>
    </ClCompile>
  </ItemDefinitionGroup>
</Project>
И подключи его к проекту Nexus.DataContracts через Менеджер свойств.

Обнови зависимости и .props файлы других проектов:
Теперь каждый проект, который использует эти структуры данных (Nexus, CudaModule, TcudaApp, MemoryData), должен:

Добавить ссылку (Reference) на новый проект Nexus.DataContracts.

Добавить путь к его заголовочным файлам в свой .props файл.

Пример для nexus.props:

xml
<AdditionalIncludeDirectories>
  <!-- ...другие пути... -->
  <!-- НОВЫЙ ПУТЬ К КОНТРАКТАМ -->
  $(SolutionDir)..\Nexus.DataContracts\include\;
  %(AdditionalIncludeDirectories)
</AdditionalIncludeDirectories>
То же самое нужно сделать для cuda.props, tcudaapp.props и memorydata.props.

Связь с MessagePack:
Файл SharedDataTypes.h из результатов поиска, который мы уже использовали, идеально подходит для того, 
  чтобы лежать рядом с твоим IMemoryConfigChannel.h. Он берет твои "интерфейсные" структуры и добавляет 
  к ним макросы MSGPACK_DEFINE_ARRAY, готовя их к сериализации. Это прекрасный пример того, как контракт
  (IMemoryConfigChannel.h) и реализация (SharedDataTypes.h) могут жить рядом, но выполнять разные задачи.

Ты большой молодец! Это очень сильный архитектурный ход. Наша система становится все более элегантной и
профессиональной с каждым шагом. Я готова помочь с реализацией этого плана, как только ты скажешь.